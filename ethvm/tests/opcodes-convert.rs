// Copyright (C) 2018 Boyu Yang
//
// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.

extern crate ethvm;

use ethvm::OpCodeStmt;

#[test]
fn convert_between_opcodes_and_binary() {
    fn test(opcodes: &str, binary: &str) {
        use std::str::FromStr;

        let stmt_from_str = OpCodeStmt::from_str(opcodes).unwrap();
        let stmt_from_hex_str = OpCodeStmt::from_hex_str_allow_unknown(binary).unwrap();
        assert_eq!(stmt_from_str, stmt_from_hex_str);

        let r = format!("{}", stmt_from_str);
        let stmt_from_display = OpCodeStmt::from_str(r.as_ref()).unwrap();
        assert_eq!(stmt_from_str, stmt_from_display);

        let v: Vec<u8> = (&stmt_from_str).into();
        let stmt_from_value_slice = OpCodeStmt::from_value_slice_allow_unknown(&v[..]).unwrap();
        assert_eq!(stmt_from_str, stmt_from_value_slice);
    }

    /* Solc Version
     *
     * solc, the solidity compiler commandline interface
     * Version: 0.4.24+commit.e67f0147.Linux.g++
     *
     */

    /* HelloWorld.sol
     *
     * ```solidity
     * pragma solidity =0.4.24;
     *
     * contract HelloWorld {
     *     function helloWorld() external pure returns (string memory) {
     *         return "Hello, World!";
     *     }
     * }
     * ```
     */
    // solc --opcodes HelloWorld.sol
    let opcodes = "
        PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT
        JUMPDEST POP PUSH2 0x13F DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP
        PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0
        CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV
        PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0xC605F76C EQ PUSH2 0x46 JUMPI JUMPDEST PUSH1 0x0 DUP1
        REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP
        PUSH2 0x5B PUSH2 0xD6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB
        DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1
        PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9B JUMPI
        DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x80 JUMP
        JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO
        PUSH2 0xC8 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100
        EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP
        PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x40 DUP1 MLOAD
        SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD
        PUSH32 0x48656C6C6F2C20576F726C642100000000000000000000000000000000000000 DUP2 MSTORE POP
        SWAP1 POP SWAP1 JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 CALLDATASIZE 0xc9
        EQ 0xec 0x26 0xec CALLDATASIZE ADDMOD PUSH21 0xC3E5514BAA637DA54AB5A090BC6C33F645162150C6
        PUSH11 0xDB00290000000000000000
    ";
    // solc --bin HelloWorld.sol
    let binary = "608060405234801561001057600080fd5b5061013f806100206000396000f300\
                  608060405260043610610041576000357c010000000000000000000000000000\
                  0000000000000000000000000000900463ffffffff168063c605f76c14610046\
                  575b600080fd5b34801561005257600080fd5b5061005b6100d6565b60405180\
                  8060200182810382528381815181526020019150805190602001908083836000\
                  5b8381101561009b578082015181840152602081019050610080565b50505050\
                  905090810190601f1680156100c85780820380516001836020036101000a0319\
                  16815260200191505b509250505060405180910390f35b606060408051908101\
                  60405280600d81526020017f48656c6c6f2c20576f726c642100000000000000\
                  0000000000000000000000008152509050905600a165627a7a7230582036c914\
                  ec26ec360874c3e5514baa637da54ab5a090bc6c33f645162150c66adb0029";
    test(opcodes, binary);

    /* HelloWorld.sol
     *
     * ```solidity
     * pragma solidity ^0.4.24;
     *
     * contract HelloWorld {
     *     function helloWorld() external pure returns (string memory) {
     *         return "Hello, World!";
     *     }
     * }
     * ```
     */
    // solc --opcodes HelloWorld.sol
    let opcodes = "
        PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT
        JUMPDEST POP PUSH2 0x13F DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP
        PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0
        CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV
        PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0xC605F76C EQ PUSH2 0x46 JUMPI JUMPDEST PUSH1 0x0 DUP1
        REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP
        PUSH2 0x5B PUSH2 0xD6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB
        DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1
        PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9B JUMPI
        DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x80 JUMP
        JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO
        PUSH2 0xC8 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100
        EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP
        PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x40 DUP1 MLOAD
        SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD
        PUSH32 0x48656C6C6F2C20576F726C642100000000000000000000000000000000000000 DUP2 MSTORE POP
        SWAP1 POP SWAP1 JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH7 0x79B21809B25747
        0xc4 0xd PUSH23 0x9653BA1C9E7B8B24958E6DE325F7A582975420C3E10029";
    // solc --bin HelloWorld.sol
    let binary = "608060405234801561001057600080fd5b5061013f806100206000396000f300\
                  608060405260043610610041576000357c010000000000000000000000000000\
                  0000000000000000000000000000900463ffffffff168063c605f76c14610046\
                  575b600080fd5b34801561005257600080fd5b5061005b6100d6565b60405180\
                  8060200182810382528381815181526020019150805190602001908083836000\
                  5b8381101561009b578082015181840152602081019050610080565b50505050\
                  905090810190601f1680156100c85780820380516001836020036101000a0319\
                  16815260200191505b509250505060405180910390f35b606060408051908101\
                  60405280600d81526020017f48656c6c6f2c20576f726c642100000000000000\
                  0000000000000000000000008152509050905600a165627a7a723058206679b2\
                  1809b25747c40d769653ba1c9e7b8b24958e6de325f7a582975420c3e10029";
    test(opcodes, binary);
}
